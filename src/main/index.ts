import { app, BrowserWindow } from 'electron';
import * as path from 'path';
import { WINDOW_DIMENSIONS, createError, ErrorCode, formatDate } from '../shared';
import { setupIpcHandlers } from './ipc/handlers';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack plugin
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Enable remote debugging if not already enabled via command line
const enableRemoteDebugging = () => {
  const existingDebugPort = app.commandLine.getSwitchValue('remote-debugging-port');
  if (!existingDebugPort) {
    app.commandLine.appendSwitch('remote-debugging-port', '9222');
    console.log('Remote debugging enabled on port 9222');
  } else {
    console.log(`Remote debugging already enabled on port ${existingDebugPort}`);
  }
};

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  try {
    // Create the browser window with secure defaults
    mainWindow = new BrowserWindow({
      width: WINDOW_DIMENSIONS.DEFAULT_WIDTH,
      height: WINDOW_DIMENSIONS.DEFAULT_HEIGHT,
      minWidth: WINDOW_DIMENSIONS.MIN_WIDTH,
      minHeight: WINDOW_DIMENSIONS.MIN_HEIGHT,
      webPreferences: {
        nodeIntegration: false, // Disable nodeIntegration for security
        contextIsolation: true, // Enable contextIsolation for security
        sandbox: true, // Enable sandbox for additional security
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, // Use preload script from webpack
      },
    });

    // Load the app using the webpack entry
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools in development
    if (process.env.NODE_ENV === 'development') {
      mainWindow.webContents.openDevTools();
    }

    // Log startup
    console.log(`Application started at: ${formatDate(new Date())}`);
  } catch (error) {
    console.error(
      createError(
        ErrorCode.UNKNOWN_ERROR,
        'Failed to create main window',
        error
      )
    );
    app.quit();
  }
};

// Set up app event handlers
app.on('ready', () => {
  enableRemoteDebugging();
  setupIpcHandlers(); // Set up IPC handlers before creating window
  createWindow();
});

// Quit when all windows are closed, except on macOS
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On macOS it's common to re-create a window when the
  // dock icon is clicked and there are no other windows open
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Security: Disable navigation and new window creation
app.on('web-contents-created', (_, contents) => {
  contents.on('will-navigate', (event) => {
    event.preventDefault();
  });
  
  contents.setWindowOpenHandler(() => {
    return { action: 'deny' };
  });
});
